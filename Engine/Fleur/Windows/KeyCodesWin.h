#pragma once

#include "KeyCodes.h"

static Fleur::KeyCode GetKeyCode(int winKey)
{
#define KEY(x) Fleur::Key::x

    switch (winKey)
    {
    case VK_SPACE:
        return KEY(Space);
    case VK_OEM_7:
        return KEY(Apostrophe);
    case VK_OEM_COMMA:
        return KEY(Comma);
    case VK_OEM_MINUS:
        return KEY(Minus);
    case VK_OEM_PERIOD:
        return KEY(Period);
    case VK_OEM_2:
        return KEY(Slash);
    case 0x30:
        return KEY(D0);
    case 0x31:
        return KEY(D1);
    case 0x32:
        return KEY(D2);
    case 0x33:
        return KEY(D3);
    case 0x34:
        return KEY(D4);
    case 0x35:
        return KEY(D5);
    case 0x36:
        return KEY(D6);
    case 0x37:
        return KEY(D7);
    case 0x38:
        return KEY(D8);
    case 0x39:
        return KEY(D9);
    case VK_OEM_1:
        return KEY(Semicolon);
    case VK_OEM_PLUS:
        return KEY(Equal);
    case 0x41:
        return KEY(A);
    case 0x42:
        return KEY(B);
    case 0x43:
        return KEY(C);
    case 0x44:
        return KEY(D);
    case 0x45:
        return KEY(E);
    case 0x46:
        return KEY(F);
    case 0x47:
        return KEY(G);
    case 0x48:
        return KEY(H);
    case 0x49:
        return KEY(I);
    case 0x4A:
        return KEY(J);
    case 0x4B:
        return KEY(K);
    case 0x4C:
        return KEY(L);
    case 0x4D:
        return KEY(M);
    case 0x4E:
        return KEY(N);
    case 0x4F:
        return KEY(O);
    case 0x50:
        return KEY(P);
    case 0x51:
        return KEY(Q);
    case 0x52:
        return KEY(R);
    case 0x53:
        return KEY(S);
    case 0x54:
        return KEY(T);
    case 0x55:
        return KEY(U);
    case 0x56:
        return KEY(V);
    case 0x57:
        return KEY(W);
    case 0x58:
        return KEY(X);
    case 0x59:
        return KEY(Y);
    case 0x5A:
        return KEY(Z);
    case VK_OEM_4:
        return KEY(LeftBracket);
    case VK_OEM_5:
        return KEY(Backslash);
    case VK_OEM_6:
        return KEY(RightBracket);
    case VK_OEM_3:
        return KEY(GraveAccent);
    case VK_ESCAPE:
        return KEY(Escape);
    case VK_RETURN:
        return KEY(Enter);
    case VK_TAB:
        return KEY(Tab);
    case VK_BACK:
        return KEY(Backspace);
    case VK_INSERT:
        return KEY(Insert);
    case VK_DELETE:
        return KEY(Delete);
    case VK_RIGHT:
        return KEY(Right);
    case VK_LEFT:
        return KEY(Left);
    case VK_DOWN:
        return KEY(Down);
    case VK_UP:
        return KEY(Up);
    case VK_PRIOR:
        return KEY(PageUp);
    case VK_NEXT:
        return KEY(PageDown);
    case VK_HOME:
        return KEY(Home);
    case VK_END:
        return KEY(End);
    case VK_CAPITAL:
        return KEY(CapsLock);
    case VK_SCROLL:
        return KEY(ScrollLock);
    case VK_NUMLOCK:
        return KEY(NumLock);
    case VK_SNAPSHOT:
        return KEY(PrintScreen);
    case VK_PAUSE:
        return KEY(Pause);
    case VK_F1:
        return KEY(F1);
    case VK_F2:
        return KEY(F2);
    case VK_F3:
        return KEY(F3);
    case VK_F4:
        return KEY(F4);
    case VK_F5:
        return KEY(F5);
    case VK_F6:
        return KEY(F6);
    case VK_F7:
        return KEY(F7);
    case VK_F8:
        return KEY(F8);
    case VK_F9:
        return KEY(F9);
    case VK_F10:
        return KEY(F10);
    case VK_F11:
        return KEY(F11);
    case VK_F12:
        return KEY(F12);
    case VK_NUMPAD0:
        return KEY(KP0);
    case VK_NUMPAD1:
        return KEY(KP1);
    case VK_NUMPAD2:
        return KEY(KP2);
    case VK_NUMPAD3:
        return KEY(KP3);
    case VK_NUMPAD4:
        return KEY(KP4);
    case VK_NUMPAD5:
        return KEY(KP5);
    case VK_NUMPAD6:
        return KEY(KP6);
    case VK_NUMPAD7:
        return KEY(KP7);
    case VK_NUMPAD8:
        return KEY(KP8);
    case VK_NUMPAD9:
        return KEY(KP9);
    case VK_DECIMAL:
        return KEY(KPDecimal);
    case VK_DIVIDE:
        return KEY(KPDivide);
    case VK_MULTIPLY:
        return KEY(KPMultiply);
    case VK_SUBTRACT:
        return KEY(KPSubtract);
    case VK_ADD:
        return KEY(KPAdd);
    case VK_LSHIFT:
        return KEY(LeftShift);
    case VK_LCONTROL:
        return KEY(LeftControl);
    case VK_LMENU:
        return KEY(LeftAlt);
    case VK_LWIN:
        return KEY(LeftSuper);
    case VK_RSHIFT:
        return KEY(RightShift);
    case VK_RCONTROL:
        return KEY(RightControl);
    case VK_RMENU:
        return KEY(RightAlt);
    case VK_RWIN:
        return KEY(RightSuper);
    case VK_MENU:
        return KEY(Menu);
    default:
        FL_CORE_ASSERT(false, "Unknown key code: {}", winKey);
        return KEY(Unknown);
    }
#undef KEY
}
